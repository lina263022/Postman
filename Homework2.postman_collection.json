{
	"info": {
		"_postman_id": "3cf233fc-6347-4cee-97a7-21c29bdd37e8",
		"name": "Homework2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1-2 Отправить запрос,cтатус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3 Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.response.to.have.body\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lina",
							"type": "default",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"type": "default",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Lina",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Спарсить response body в json\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Check your name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Lina');\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Check your age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('31');\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"  pm.test(\"Check your salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"\r",
							"  pm.test(\"Equality your name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"  pm.test(\"Equality your age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"\r",
							" pm.test(\"Equality your salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"Family from response\" ,jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"\r",
							" pm.test(\"Equality your salary 1.5 year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lina",
							"type": "default"
						},
						{
							"key": "age",
							"value": "31",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check your name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql( req_data.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"\r",
							"pm.test(\"Check your age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check your salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req_data.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"\r",
							"console.log(\"Family from response\",jsonData.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"\r",
							"pm.test(\"Check dog's age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Kate&age=43&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Kate"
						},
						{
							"key": "age",
							"value": "43"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							" //Спарсить response body в json\r",
							" let jsonData = pm.response.json()\r",
							"\r",
							" //Спарсить request\r",
							" let req_data = pm.request.url.query.toObject()\r",
							"\r",
							" //Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"\r",
							"pm.test(\"Check your name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"\r",
							"pm.test(\"Check your age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.age)).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request\r",
							"\r",
							"console.log(\"Salary from request =\",req_data.salary)\r",
							"\r",
							" //Вывести в консоль параметр salary из response\r",
							" \r",
							" console.log(\"Salary from response =\",jsonData.salary)\r",
							"\r",
							" //Вывести в консоль 0-й элемент параметра salary из response\r",
							" \r",
							" console.log(\"0 elem salary from response =\",jsonData.salary[0])\r",
							"\r",
							" //Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							" \r",
							"console.log(\"1 elem salary from response =\",jsonData.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"let resp_salary_2 = jsonData.salary[2]\r",
							"console.log(\"2 elem salary from response =\",jsonData.salary[2])\r",
							"\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary comparison0\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary[0])).to.eql(req_data.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Salary comparison1\", function () {\r",
							"    pm.expect(Number(jsonData.salary[1])).to.eql(req_data.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"pm.test(\"Salary comparison2\", function () {\r",
							"    pm.expect(Number(jsonData.salary[2])).to.eql(req_data.salary*3);\r",
							"});\r",
							"\r",
							"//Создать и передать в окружение переменную name\r",
							"pm.environment.set(\"name\",jsonData.name);\r",
							"\r",
							"//Создать и передать в окружение переменную age\r",
							"pm.environment.set(\"age\",jsonData.age);\r",
							"\r",
							"//Создать и передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_data.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"for (i=0; i<jsonData.salary.length; i++){\r",
							"    console.log( jsonData.salary[i])\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ivan&age=35&salary=900",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "900"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"\r",
							"pm.variables.get('salary')\r",
							"//Вставить параметр age из окружения в request\r",
							"\r",
							"pm.variables.get(\"age\");\r",
							"\r",
							"//Вставить параметр name из окружения в request\r",
							" \r",
							"pm.variables.get(\"name\");\r",
							"\r",
							" // Спарсить response body в json\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Check param start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Check param qa_salary_after_6_months\", function () {\r",
							"    pm.expect((jsonData)).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Check param qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Check param qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//  Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Check param qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Check param person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check your salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check your salary after 6 month\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(req.salary*2 ));\r",
							"});\r",
							"\r",
							"////Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check your salary after 12 month\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(req.salary*2.7 ));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"\r",
							"\r",
							"pm.test(\"Check your salary after 1.5 year\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary*3.3 );\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check your salary after 3.5 year\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check param person\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request)\r",
							"\r",
							"pm.test(\"Check your u_age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.person.u_age)).to.eql(req.age)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check your salary after 5 years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"for(let key in jsonData.person){\r",
							"    console.log(`${key} -- ${jsonData.person[key]}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//Статус код 200",
					"",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}